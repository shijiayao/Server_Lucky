########## 每个指令必须有分号结束。##########

# user nobody; # 配置用户或者组，默认为nobody nobody。

worker_processes auto; # 允许生成的进程数，默认为1

# pid logs/nginx.pid; # 指定nginx进程运行文件存放地址

# ↓ 指定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg
# error_log logs/error.log;
# error_log logs/error.log debug;
# error_log logs/error.log notice;
# error_log logs/error.log info;

events {
  accept_mutex on; # 设置网路连接序列化，防止惊群现象发生，默认为on
  multi_accept on; # 设置一个进程是否同时接受多个网络连接，默认为off
  # use epoll; # 事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
  worker_connections 4096; # 最大连接数，默认为512
}

http {
  include mime.types; # 文件扩展名与文件类型映射表
  default_type application/octet-stream; # 默认文件类型，默认为text/plain

  # access_log off; # 取消服务日志

  # ↓ 自定义日志格式
  log_format my_log_format '[$time_iso8601]-$remote_addr-$remote_user $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for';

  access_log logs/access.log my_log_format; # combined为日志格式的默认值

  sendfile on; # 允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。

  # sendfile_max_chunk 100k; # 每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。

  keepalive_timeout 120; # 连接超时时间，默认为75s，可以在http块，server块，location块。

  # gzip on; # gzip压缩，默认为off

  # ↓ 负载均衡，定义一组服务器，默认情况下，使用加权循环平衡方法在服务器之间分配请求。如果在与服务器通信期间发生错误，该请求将被传递到下一个服务器，依此类推，直到尝试所有正常运行的服务器为止。如果无法从任何一台服务器获得成功的响应，则客户端将收到与最后一台服务器的通信结果。
  upstream upstream_name {
    server 127.0.0.1:7875;
    server 127.0.0.1:7876;
    server 127.0.0.1:7877;
    server 127.0.0.1:7878;
    server 127.0.0.1:7879;
    server 127.0.0.1:7880;
  }

  error_page 404 /404.html; # 404错误页面，可以在http块，server块。

  server {
    keepalive_requests 120; # 单连接请求上限次数，设置在一个长连接上可以服务的最大请求数目。当达到最大请求数目并结束服务后，连接被关闭。

    listen 80; # 监听端口

    server_name localhost 127.0.0.1; # 监听地址

    client_max_body_size 100m; # 上传文件大小，默认是1m。

    # root path; # 根目录，可以在server块，location块。
    # index index.html index.htm; # 设置默认页，可以在server块，location块。

    location / {
      root html;
      index index.html index.htm;
    }

    # location ~*^.+$ { # 请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
    #     proxy_pass http://upstream_name; # 请求转向upstream_name，定义的服务器列表
    #     deny all; # 拒绝的ip
    #     allow 127.0.0.1 127.0.0.2; # 允许的ip
    # }

    error_page 500 502 503 504 /50x.html; # 500错误页面，可以在http块，server块。

    # ↓ 匹配500错误页面
    location = /50x.html {
      root html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}

  }

  # another virtual host using mix of IP-, name-, and port-based configuration
  #
  #server {
  #    listen       8000;
  #    listen       somename:8080;
  #    server_name  somename  alias  another.alias;

  #    location / {
  #        root   html;
  #        index  index.html index.htm;
  #    }
  #}


  # HTTPS server

  server {
     listen       443 ssl;
     server_name  localhost 127.0.0.1;

     ssl_certificate      D:/Web/node_server/https_server/https_server.pem;
     ssl_certificate_key  D:/Web/node_server/https_server/https_server.key;

     ssl_session_cache    shared:SSL:1m;
     ssl_session_timeout  5m;

     ssl_ciphers  HIGH:!aNULL:!MD5;
     ssl_prefer_server_ciphers  on;

     location / {
         root   html;
         index  index.html index.htm;
     }
  }

  # 读取 vhosts 目录下的所有 .conf 文件配置
  include D:/Web/node_server/server_v1/nginx_conf/vhosts/*.conf;

  # ↓ 配置多个 server 虚拟主机需要添加以下参数，一般搭配上一个设置 include vhosts/*.conf;
  server_names_hash_bucket_size 128; # 服务器名字的hash表大小
}
